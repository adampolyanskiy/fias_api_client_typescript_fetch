/* tslint:disable */
/* eslint-disable */
/**
 * SPAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResult,
  IFetchChangesTaskResultBlock,
  IFetchChangesTaskStatus,
  IdResult,
} from '../models/index';
import {
    ErrorResultFromJSON,
    ErrorResultToJSON,
    IFetchChangesTaskResultBlockFromJSON,
    IFetchChangesTaskResultBlockToJSON,
    IFetchChangesTaskStatusFromJSON,
    IFetchChangesTaskStatusToJSON,
    IdResultFromJSON,
    IdResultToJSON,
} from '../models/index';

export interface ApiSpasV20GetChangesGetRequest {
    startDate?: Date;
    endDate?: Date;
    changeMask?: number;
    regionCode?: number;
}

export interface ApiSpasV20GetSearchResultBlockGetRequest {
    taskId?: number;
    blockIndex?: number;
}

export interface ApiSpasV20GetSearchTaskStatusGetRequest {
    taskId?: number;
}

/**
 * 
 */
export class ChangesApi extends runtime.BaseAPI {

    /**
     * Поставить задачу на получение списка адресных объектов, изменённых в указанный интервал времени и отобранных по критериям
     */
    async apiSpasV20GetChangesGetRaw(requestParameters: ApiSpasV20GetChangesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResult>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.changeMask !== undefined) {
            queryParameters['changeMask'] = requestParameters.changeMask;
        }

        if (requestParameters.regionCode !== undefined) {
            queryParameters['regionCode'] = requestParameters.regionCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/GetChanges`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResultFromJSON(jsonValue));
    }

    /**
     * Поставить задачу на получение списка адресных объектов, изменённых в указанный интервал времени и отобранных по критериям
     */
    async apiSpasV20GetChangesGet(requestParameters: ApiSpasV20GetChangesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResult> {
        const response = await this.apiSpasV20GetChangesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Сервис для получения типов объектов ФИАС
     */
    async apiSpasV20GetSearchResultBlockGetRaw(requestParameters: ApiSpasV20GetSearchResultBlockGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IFetchChangesTaskResultBlock>> {
        const queryParameters: any = {};

        if (requestParameters.taskId !== undefined) {
            queryParameters['taskId'] = requestParameters.taskId;
        }

        if (requestParameters.blockIndex !== undefined) {
            queryParameters['blockIndex'] = requestParameters.blockIndex;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/GetSearchResultBlock`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IFetchChangesTaskResultBlockFromJSON(jsonValue));
    }

    /**
     * Сервис для получения типов объектов ФИАС
     */
    async apiSpasV20GetSearchResultBlockGet(requestParameters: ApiSpasV20GetSearchResultBlockGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IFetchChangesTaskResultBlock> {
        const response = await this.apiSpasV20GetSearchResultBlockGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Сервис для получения состояния задачи по поиску изменений
     */
    async apiSpasV20GetSearchTaskStatusGetRaw(requestParameters: ApiSpasV20GetSearchTaskStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IFetchChangesTaskStatus>> {
        const queryParameters: any = {};

        if (requestParameters.taskId !== undefined) {
            queryParameters['taskId'] = requestParameters.taskId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/GetSearchTaskStatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IFetchChangesTaskStatusFromJSON(jsonValue));
    }

    /**
     * Сервис для получения состояния задачи по поиску изменений
     */
    async apiSpasV20GetSearchTaskStatusGet(requestParameters: ApiSpasV20GetSearchTaskStatusGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IFetchChangesTaskStatus> {
        const response = await this.apiSpasV20GetSearchTaskStatusGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
