/* tslint:disable */
/* eslint-disable */
/**
 * SPAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddNoticeResult,
  ErrorResult,
  GetNoticeStatusResult,
  Notice,
  NoticeFilterObject,
  NoticeItemsResult,
} from '../models/index';
import {
    AddNoticeResultFromJSON,
    AddNoticeResultToJSON,
    ErrorResultFromJSON,
    ErrorResultToJSON,
    GetNoticeStatusResultFromJSON,
    GetNoticeStatusResultToJSON,
    NoticeFromJSON,
    NoticeToJSON,
    NoticeFilterObjectFromJSON,
    NoticeFilterObjectToJSON,
    NoticeItemsResultFromJSON,
    NoticeItemsResultToJSON,
} from '../models/index';

export interface ApiSpasV20AddNoticePostRequest {
    notice?: Notice;
}

export interface ApiSpasV20GetNoticeItemsPostRequest {
    noticeFilterObject?: NoticeFilterObject;
}

export interface ApiSpasV20GetNoticeStatusGetRequest {
    id?: number;
}

/**
 * 
 */
export class NoticeApi extends runtime.BaseAPI {

    /**
     * Добавление уведомления
     */
    async apiSpasV20AddNoticePostRaw(requestParameters: ApiSpasV20AddNoticePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddNoticeResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/AddNotice`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NoticeToJSON(requestParameters.notice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddNoticeResultFromJSON(jsonValue));
    }

    /**
     * Добавление уведомления
     */
    async apiSpasV20AddNoticePost(requestParameters: ApiSpasV20AddNoticePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddNoticeResult> {
        const response = await this.apiSpasV20AddNoticePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получение списка уведомлений по условию
     */
    async apiSpasV20GetNoticeItemsPostRaw(requestParameters: ApiSpasV20GetNoticeItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NoticeItemsResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/GetNoticeItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NoticeFilterObjectToJSON(requestParameters.noticeFilterObject),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoticeItemsResultFromJSON(jsonValue));
    }

    /**
     * Получение списка уведомлений по условию
     */
    async apiSpasV20GetNoticeItemsPost(requestParameters: ApiSpasV20GetNoticeItemsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NoticeItemsResult> {
        const response = await this.apiSpasV20GetNoticeItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получение статуса обработки уведомления
     */
    async apiSpasV20GetNoticeStatusGetRaw(requestParameters: ApiSpasV20GetNoticeStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNoticeStatusResult>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/GetNoticeStatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNoticeStatusResultFromJSON(jsonValue));
    }

    /**
     * Получение статуса обработки уведомления
     */
    async apiSpasV20GetNoticeStatusGet(requestParameters: ApiSpasV20GetNoticeStatusGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNoticeStatusResult> {
        const response = await this.apiSpasV20GetNoticeStatusGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
