/* tslint:disable */
/* eslint-disable */
/**
 * SPAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressDetailsResult,
  AddressType,
  AddressesResult,
  CheckResult,
  ErrorResult,
  FiasTypesResult,
  FilterObject,
} from '../models/index';
import {
    AddressDetailsResultFromJSON,
    AddressDetailsResultToJSON,
    AddressTypeFromJSON,
    AddressTypeToJSON,
    AddressesResultFromJSON,
    AddressesResultToJSON,
    CheckResultFromJSON,
    CheckResultToJSON,
    ErrorResultFromJSON,
    ErrorResultToJSON,
    FiasTypesResultFromJSON,
    FiasTypesResultToJSON,
    FilterObjectFromJSON,
    FilterObjectToJSON,
} from '../models/index';

export interface ApiSpasV20GetAddressItemByCadastralNumberGetRequest {
    cadastralNumber?: string;
    addressType?: AddressType;
}

export interface ApiSpasV20GetAddressItemByGuidGetRequest {
    objectGuid?: string;
    addressType?: AddressType;
}

export interface ApiSpasV20GetAddressItemByIdGetRequest {
    objectId?: number;
    addressType?: AddressType;
}

export interface ApiSpasV20GetAddressItemsPostRequest {
    filterObject?: FilterObject;
}

export interface ApiSpasV20GetDetailsGetRequest {
    objectId?: number;
}

export interface ApiSpasV20HasDescendantsGetRequest {
    parent?: number;
    upToLevel?: number;
    addressType?: AddressType;
}

export interface ApiSpasV20IsDescendantGetRequest {
    ancestor?: number;
    descendant?: number;
    addressType?: AddressType;
}

/**
 * 
 */
export class AddressInfoApi extends runtime.BaseAPI {

    /**
     * Получение адресного элемента по кадастровому номеру
     */
    async apiSpasV20GetAddressItemByCadastralNumberGetRaw(requestParameters: ApiSpasV20GetAddressItemByCadastralNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressesResult>> {
        const queryParameters: any = {};

        if (requestParameters.cadastralNumber !== undefined) {
            queryParameters['cadastral_number'] = requestParameters.cadastralNumber;
        }

        if (requestParameters.addressType !== undefined) {
            queryParameters['address_type'] = requestParameters.addressType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/GetAddressItemByCadastralNumber`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressesResultFromJSON(jsonValue));
    }

    /**
     * Получение адресного элемента по кадастровому номеру
     */
    async apiSpasV20GetAddressItemByCadastralNumberGet(requestParameters: ApiSpasV20GetAddressItemByCadastralNumberGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressesResult> {
        const response = await this.apiSpasV20GetAddressItemByCadastralNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получение адресного элемента по уникальному идентификатору ФИАС
     */
    async apiSpasV20GetAddressItemByGuidGetRaw(requestParameters: ApiSpasV20GetAddressItemByGuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressesResult>> {
        const queryParameters: any = {};

        if (requestParameters.objectGuid !== undefined) {
            queryParameters['object_guid'] = requestParameters.objectGuid;
        }

        if (requestParameters.addressType !== undefined) {
            queryParameters['address_type'] = requestParameters.addressType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/GetAddressItemByGuid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressesResultFromJSON(jsonValue));
    }

    /**
     * Получение адресного элемента по уникальному идентификатору ФИАС
     */
    async apiSpasV20GetAddressItemByGuidGet(requestParameters: ApiSpasV20GetAddressItemByGuidGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressesResult> {
        const response = await this.apiSpasV20GetAddressItemByGuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получение адресного элемента по идентификатору
     */
    async apiSpasV20GetAddressItemByIdGetRaw(requestParameters: ApiSpasV20GetAddressItemByIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressesResult>> {
        const queryParameters: any = {};

        if (requestParameters.objectId !== undefined) {
            queryParameters['object_id'] = requestParameters.objectId;
        }

        if (requestParameters.addressType !== undefined) {
            queryParameters['address_type'] = requestParameters.addressType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/GetAddressItemById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressesResultFromJSON(jsonValue));
    }

    /**
     * Получение адресного элемента по идентификатору
     */
    async apiSpasV20GetAddressItemByIdGet(requestParameters: ApiSpasV20GetAddressItemByIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressesResult> {
        const response = await this.apiSpasV20GetAddressItemByIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить список дочерних элементов, соответствующих заданным фильтрам
     */
    async apiSpasV20GetAddressItemsPostRaw(requestParameters: ApiSpasV20GetAddressItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressesResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/GetAddressItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FilterObjectToJSON(requestParameters.filterObject),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressesResultFromJSON(jsonValue));
    }

    /**
     * Получить список дочерних элементов, соответствующих заданным фильтрам
     */
    async apiSpasV20GetAddressItemsPost(requestParameters: ApiSpasV20GetAddressItemsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressesResult> {
        const response = await this.apiSpasV20GetAddressItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить дополнительную информацию для заданного адресного элемента
     */
    async apiSpasV20GetDetailsGetRaw(requestParameters: ApiSpasV20GetDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressDetailsResult>> {
        const queryParameters: any = {};

        if (requestParameters.objectId !== undefined) {
            queryParameters['object_id'] = requestParameters.objectId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/GetDetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDetailsResultFromJSON(jsonValue));
    }

    /**
     * Получить дополнительную информацию для заданного адресного элемента
     */
    async apiSpasV20GetDetailsGet(requestParameters: ApiSpasV20GetDetailsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressDetailsResult> {
        const response = await this.apiSpasV20GetDetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получение типов объектов ФИАС
     */
    async apiSpasV20GetFiasObjectTypesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiasTypesResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/GetFiasObjectTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiasTypesResultFromJSON(jsonValue));
    }

    /**
     * Получение типов объектов ФИАС
     */
    async apiSpasV20GetFiasObjectTypesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiasTypesResult> {
        const response = await this.apiSpasV20GetFiasObjectTypesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Получить список регионов
     */
    async apiSpasV20GetRegionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressesResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/GetRegions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressesResultFromJSON(jsonValue));
    }

    /**
     * Получить список регионов
     */
    async apiSpasV20GetRegionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressesResult> {
        const response = await this.apiSpasV20GetRegionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Проверка, имеет ли элемент parent дочерние элементы до уровня up_to_level
     */
    async apiSpasV20HasDescendantsGetRaw(requestParameters: ApiSpasV20HasDescendantsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckResult>> {
        const queryParameters: any = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        if (requestParameters.upToLevel !== undefined) {
            queryParameters['up_to_level'] = requestParameters.upToLevel;
        }

        if (requestParameters.addressType !== undefined) {
            queryParameters['address_type'] = requestParameters.addressType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/HasDescendants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckResultFromJSON(jsonValue));
    }

    /**
     * Проверка, имеет ли элемент parent дочерние элементы до уровня up_to_level
     */
    async apiSpasV20HasDescendantsGet(requestParameters: ApiSpasV20HasDescendantsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckResult> {
        const response = await this.apiSpasV20HasDescendantsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Проверка, является ли элемент ancestor родительским элементом в иерархии для элемента descendant
     */
    async apiSpasV20IsDescendantGetRaw(requestParameters: ApiSpasV20IsDescendantGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckResult>> {
        const queryParameters: any = {};

        if (requestParameters.ancestor !== undefined) {
            queryParameters['ancestor'] = requestParameters.ancestor;
        }

        if (requestParameters.descendant !== undefined) {
            queryParameters['descendant'] = requestParameters.descendant;
        }

        if (requestParameters.addressType !== undefined) {
            queryParameters['address_type'] = requestParameters.addressType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["master-token"] = this.configuration.apiKey("master-token"); // master-token authentication
        }

        const response = await this.request({
            path: `/api/spas/v2.0/IsDescendant`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckResultFromJSON(jsonValue));
    }

    /**
     * Проверка, является ли элемент ancestor родительским элементом в иерархии для элемента descendant
     */
    async apiSpasV20IsDescendantGet(requestParameters: ApiSpasV20IsDescendantGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckResult> {
        const response = await this.apiSpasV20IsDescendantGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
