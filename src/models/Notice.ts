/* tslint:disable */
/* eslint-disable */
/**
 * SPAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NoticeAddress } from './NoticeAddress';
import {
    NoticeAddressFromJSON,
    NoticeAddressFromJSONTyped,
    NoticeAddressToJSON,
} from './NoticeAddress';
import type { NoticeSourceType } from './NoticeSourceType';
import {
    NoticeSourceTypeFromJSON,
    NoticeSourceTypeFromJSONTyped,
    NoticeSourceTypeToJSON,
} from './NoticeSourceType';
import type { NoticeType } from './NoticeType';
import {
    NoticeTypeFromJSON,
    NoticeTypeFromJSONTyped,
    NoticeTypeToJSON,
} from './NoticeType';

/**
 * 
 * @export
 * @interface Notice
 */
export interface Notice {
    /**
     * 
     * @type {string}
     * @memberof Notice
     */
    senderCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Notice
     */
    senderName?: string | null;
    /**
     * 
     * @type {NoticeType}
     * @memberof Notice
     */
    noticeType?: NoticeType;
    /**
     * 
     * @type {NoticeSourceType}
     * @memberof Notice
     */
    sourceType?: NoticeSourceType;
    /**
     * 
     * @type {string}
     * @memberof Notice
     */
    requestId?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Notice
     */
    requestDate?: Date;
    /**
     * 
     * @type {NoticeAddress}
     * @memberof Notice
     */
    address?: NoticeAddress;
}

/**
 * Check if a given object implements the Notice interface.
 */
export function instanceOfNotice(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NoticeFromJSON(json: any): Notice {
    return NoticeFromJSONTyped(json, false);
}

export function NoticeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Notice {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'senderCode': !exists(json, 'sender_code') ? undefined : json['sender_code'],
        'senderName': !exists(json, 'sender_name') ? undefined : json['sender_name'],
        'noticeType': !exists(json, 'notice_type') ? undefined : NoticeTypeFromJSON(json['notice_type']),
        'sourceType': !exists(json, 'source_type') ? undefined : NoticeSourceTypeFromJSON(json['source_type']),
        'requestId': !exists(json, 'request_id') ? undefined : json['request_id'],
        'requestDate': !exists(json, 'request_date') ? undefined : (new Date(json['request_date'])),
        'address': !exists(json, 'address') ? undefined : NoticeAddressFromJSON(json['address']),
    };
}

export function NoticeToJSON(value?: Notice | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sender_code': value.senderCode,
        'sender_name': value.senderName,
        'notice_type': NoticeTypeToJSON(value.noticeType),
        'source_type': NoticeSourceTypeToJSON(value.sourceType),
        'request_id': value.requestId,
        'request_date': value.requestDate === undefined ? undefined : (value.requestDate.toISOString()),
        'address': NoticeAddressToJSON(value.address),
    };
}

